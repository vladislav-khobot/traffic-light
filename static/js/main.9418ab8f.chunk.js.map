{"version":3,"sources":["store/colors/selectors.js","components/Circle/Circle.js","containers/Board/Board.js","store/initialState.js","helpers.js","store/colors/reducer.js","store/colors/actions.js","components/Input/Input.js","components/Button/Button.js","containers/Controlling/Controlling.js","store/store.js","App.js","reportWebVitals.js","index.js"],"names":["selectRed","store","colorRed","selectYellow","colorYellow","selectGreen","colorGreen","selectAutoModeID","autoModeID","selectTimeOut","timeOut","Circle","props","color","className","Board","useSelector","initialState","getColorsCombination","CHANGE_TIMEOUT","COLOR_CHANGE","START_AUTO_MODE","STOP_AUTO_MODE","actionColorChange","type","Input","value","onChange","Button","name","onClick","Controlling","dispatch","useDispatch","onNextStep","useCallback","onStartAutoMode","setInterval","actionStartAutoMode","onStopAutoMode","clearInterval","onChangeInterval","event","newInterval","target","actionChangeTimeout","createStore","state","action","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAAaA,EAAY,SAAAC,GAAK,OAAIA,EAAMC,UAC3BC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,aAC9BC,EAAc,SAAAJ,GAAK,OAAIA,EAAMK,YAE7BC,EAAmB,SAAAN,GAAK,OAAIA,EAAMO,YAClCC,EAAgB,SAAAR,GAAK,OAAIA,EAAMS,S,eCH5C,SAASC,EAAOC,GACd,IAAMC,EAAUD,EAAVC,MAGN,OAFKA,IAAOA,EAAQ,SAGlB,qBAAKC,UAAS,iBAAYD,K,MCC9B,SAASE,IACP,IAAMb,EAAWc,YAAYhB,IAAc,MACrCI,EAAcY,YAAYb,IAAiB,SAC3CG,EAAaU,YAAYX,IAAgB,QAE/C,OACE,sBAAKS,UAAU,QAAf,UACE,cAAC,EAAD,CAAQD,MAAOX,IACf,cAAC,EAAD,CAAQW,MAAOT,IACf,cAAC,EAAD,CAAQS,MAAOP,O,WCjBfW,EAAe,CACnBf,UAAU,EACVE,aAAa,EACbE,YAAY,EACZE,WAAY,KACZE,QAAS,KCLX,SAASQ,EAAqBhB,EAAUE,EAAaE,GASnD,MAR0B,CACxB,oBAAqB,CAAEJ,UAAU,EAAME,aAAa,EAAOE,YAAY,GACvE,mBAAoB,CAAEJ,UAAU,EAAME,aAAa,EAAME,YAAY,GACrE,kBAAmB,CAAEJ,UAAU,EAAOE,aAAa,EAAOE,YAAY,GACtE,mBAAoB,CAAEJ,UAAU,EAAOE,aAAa,EAAME,YAAY,GACtE,mBAAoB,CAAEJ,UAAU,EAAME,aAAa,EAAOE,YAAY,IAG/C,GAAD,OAAIJ,EAAJ,YAAgBE,EAAhB,YAA+BE,ICNzD,IAAMa,EAAiB,iBACjBC,EAAe,eACfC,EAAkB,kBAClBC,EAAiB,iBCOhB,SAASC,IAEd,MAAO,CACLC,KAAMJ,G,MCdV,SAASK,EAAMb,GACb,IAAQc,EAAoBd,EAApBc,MAAOC,EAAaf,EAAbe,SAEf,OACE,iCACE,mDACA,uBAAOH,KAAK,SAASE,MAAOA,EAAOC,SAAUA,O,MCNnD,SAASC,EAAOhB,GACd,IAAQiB,EAAkBjB,EAAlBiB,KAAMC,EAAYlB,EAAZkB,QAEd,OACE,wBAAQhB,UAAU,MAAMgB,QAASA,EAAjC,SACGD,I,MCMP,SAASE,IACP,IAAMC,EAAWC,cACXzB,EAAaQ,YAAYT,GACzBG,EAAUM,YAAYP,GAEtByB,EAAaC,uBAAY,WAC7BH,EAAST,OACR,CAACS,IAEEI,EAAkBD,uBAAY,WAClC,IAAM3B,EAAa6B,aAAY,WAC7BL,EAAST,OACRb,GAEHsB,EHPG,SAA6BxB,GAElC,MAAO,CACLgB,KAAMH,EACNb,cGGS8B,CAAoB9B,MAC5B,CAACwB,EAAUtB,IAER6B,EAAiBJ,uBAAY,WACjCK,cAAchC,GACdwB,EHFK,CACLR,KAAMF,MGEL,CAACU,EAAUxB,IAERiC,EAAmBN,uBAAY,SAACO,GACpC,IAAMC,EAAmC,IAArBD,EAAME,OAAOlB,MACjCM,EHhCG,SAA6BtB,GAElC,MAAO,CACLc,KAAML,EACNT,WG4BSmC,CAAoBF,MAC5B,CAACX,IAEJ,OACE,sBAAKlB,UAAU,cAAf,UACE,cAAC,EAAD,CAAQe,KAAK,YAAYC,QAASI,IAClC,cAAC,EAAD,CAAOR,MAAOhB,EAAU,IAAMiB,SAAUc,IACxC,cAAC,EAAD,CAAQZ,KAAK,kBAAkBC,QAASM,IACxC,cAAC,EAAD,CAAQP,KAAK,iBAAiBC,QAASS,O,WCzCvCtC,EAAQ6C,aLId,WAAqD,IAA/BC,EAA8B,uDAAtB9B,EAAc+B,EAAQ,uCAClD,OAAOA,EAAOxB,MACZ,KAAKJ,EACH,MAA8CF,EAAqB6B,EAAM7C,SAAU6C,EAAM3C,YAAa2C,EAAMzC,YAApGJ,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,YAAaE,EAA/B,EAA+BA,WAC/B,OAAO,2BACFyC,GADL,IAEE7C,WACAE,cACAE,eAGJ,KAAKe,EACH,OAAO,2BACF0B,GADL,IAEEvC,WAAYwC,EAAOxC,aAGvB,KAAKc,EACH,OAAO,2BACFyB,GADL,IAEEvC,WAAY,OAGhB,KAAKW,EACH,OAAO,2BACF4B,GADL,IAEErC,QAASsC,EAAOtC,UAGpB,QAAS,OAAOqC,M,MMjBLE,MAZf,WAEE,OACE,cAAC,IAAD,CAAUhD,MAAOA,EAAjB,SACE,sBAAKa,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCFOoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.9418ab8f.chunk.js","sourcesContent":["export const selectRed = store => store.colorRed;\nexport const selectYellow = store => store.colorYellow;\nexport const selectGreen = store => store.colorGreen;\n\nexport const selectAutoModeID = store => store.autoModeID;\nexport const selectTimeOut = store => store.timeOut;","import './Circle.scss';\n\nfunction Circle(props) {\n  let { color } = props;\n  if (!color) color = 'black';\n\n  return (\n    <div className={`circle ${color}`} />\n  );\n}\n\nexport { Circle };","import { useSelector } from 'react-redux';\n\nimport { selectRed, selectYellow, selectGreen } from '../../store/colors/selectors';\nimport { Circle } from '../../components/Circle';\n\nimport './Board.scss';\n\n\nfunction Board() {\n  const colorRed = useSelector(selectRed) && 'red';\n  const colorYellow = useSelector(selectYellow) && 'yellow';\n  const colorGreen = useSelector(selectGreen) && 'green';\n  \n  return (\n    <div className=\"board\">\n      <Circle color={colorRed} />\n      <Circle color={colorYellow} />\n      <Circle color={colorGreen} />\n    </div>\n  );\n}\n\nexport { Board };","const initialState = {\n  colorRed: false,\n  colorYellow: false,\n  colorGreen: false,\n  autoModeID: null,\n  timeOut: 1000,\n}\n\nexport { initialState };","function getColorsCombination(colorRed, colorYellow, colorGreen) {\n  const colorsCombination = {\n    'false-false-false': { colorRed: true, colorYellow: false, colorGreen: false},\n    'true-false-false': { colorRed: true, colorYellow: true, colorGreen: false},\n    'true-true-false': { colorRed: false, colorYellow: false, colorGreen: true},\n    'false-false-true': { colorRed: false, colorYellow: true, colorGreen: false},\n    'false-true-false': { colorRed: true, colorYellow: false, colorGreen: false},\n  }  \n\n  return colorsCombination[`${colorRed}-${colorYellow}-${colorGreen}`];\n}\n\nexport { getColorsCombination };","import { initialState } from '../initialState';\nimport { getColorsCombination } from '../../helpers';\n\nconst CHANGE_TIMEOUT = 'CHANGE_TIMEOUT';\nconst COLOR_CHANGE = 'COLOR_CHANGE';\nconst START_AUTO_MODE = 'START_AUTO_MODE';\nconst STOP_AUTO_MODE = 'STOP_AUTO_MODE';\n\nfunction colorReducer(state = initialState, action) {\n  switch(action.type) {\n    case COLOR_CHANGE:\n      const { colorRed, colorYellow, colorGreen } = getColorsCombination(state.colorRed, state.colorYellow, state.colorGreen);\n      return {\n        ...state,\n        colorRed,\n        colorYellow,\n        colorGreen,\n      }\n\n    case START_AUTO_MODE:\n      return {\n        ...state,\n        autoModeID: action.autoModeID,\n      }\n\n    case STOP_AUTO_MODE:\n      return {\n        ...state,\n        autoModeID: null,\n      }\n\n    case CHANGE_TIMEOUT:\n      return {\n        ...state,\n        timeOut: action.timeOut,\n      }\n\n    default: return state;\n  }\n}\n\nexport { CHANGE_TIMEOUT, COLOR_CHANGE, START_AUTO_MODE, STOP_AUTO_MODE, colorReducer };","import { CHANGE_TIMEOUT } from './reducer';\nimport { COLOR_CHANGE } from './reducer';\nimport { START_AUTO_MODE } from './reducer';\nimport { STOP_AUTO_MODE } from './reducer';\n\nexport function actionChangeTimeout(timeOut) {\n\n  return {\n    type: CHANGE_TIMEOUT,\n    timeOut,\n  }\n}\n\nexport function actionColorChange() {\n\n  return {\n    type: COLOR_CHANGE,\n  }\n}\n\nexport function actionStartAutoMode(autoModeID) {\n\n  return {\n    type: START_AUTO_MODE,\n    autoModeID,\n  }\n}\n\nexport function actionStopAutoMode() {\n  \n  return {\n    type: STOP_AUTO_MODE,\n  }\n}","import './Input.scss';\n\nfunction Input(props) {\n  const { value, onChange } = props;\n  \n  return (\n    <span>\n      <p>Set timeout (sec):</p>\n      <input type=\"number\" value={value} onChange={onChange} />\n    </span>\n  );\n}\n\nexport { Input };","import './Button.scss';\n\nfunction Button(props) {\n  const { name, onClick } = props;\n  \n  return (\n    <button className=\"btn\" onClick={onClick}>\n      {name}\n    </button>\n  );\n}\n\nexport { Button };","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { actionColorChange } from '../../store/colors/actions';\nimport { actionStartAutoMode } from '../../store/colors/actions';\nimport { actionStopAutoMode } from '../../store/colors/actions';\nimport { actionChangeTimeout } from '../../store/colors/actions';\nimport { selectAutoModeID, selectTimeOut } from '../../store/colors/selectors';\nimport { Input } from '../../components/Input';\nimport { Button } from '../../components/Button';\n\nimport './Controlling.scss';\n\nfunction Controlling() {\n  const dispatch = useDispatch();\n  const autoModeID = useSelector(selectAutoModeID);\n  const timeOut = useSelector(selectTimeOut);\n\n  const onNextStep = useCallback(() => {\n    dispatch(actionColorChange());\n  }, [dispatch]);\n\n  const onStartAutoMode = useCallback(() => {\n    const autoModeID = setInterval(() => {\n      dispatch(actionColorChange());  \n    }, timeOut);\n\n    dispatch(actionStartAutoMode(autoModeID));\n  }, [dispatch, timeOut]);\n\n  const onStopAutoMode = useCallback(() => {\n    clearInterval(autoModeID);\n    dispatch(actionStopAutoMode());\n  }, [dispatch, autoModeID]);\n\n  const onChangeInterval = useCallback((event) => {\n    const newInterval = event.target.value * 1000;\n    dispatch(actionChangeTimeout(newInterval));\n  }, [dispatch]);\n\n  return (\n    <div className=\"controlling\">\n      <Button name=\"Next step\" onClick={onNextStep}/>\n      <Input value={timeOut / 1000} onChange={onChangeInterval} />\n      <Button name=\"Start auto-mode\" onClick={onStartAutoMode}/>\n      <Button name=\"Stop auto-mode\" onClick={onStopAutoMode}/>\n    </div>\n  );\n}\n\nexport { Controlling };","import { createStore } from 'redux';\n\nimport { colorReducer } from './colors/reducer';\n\nconst store = createStore(colorReducer);\n\nexport { store };","import { Provider } from 'react-redux';\n\nimport { Board } from './containers/Board';\nimport { Controlling } from './containers/Controlling';\nimport { store } from './store/store';\n\nimport './assets/styles/App.scss';\n\nfunction App() {\n  \n  return (\n    <Provider store={store}>\n      <div className=\"app\">\n        <Board />\n        <Controlling />  \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './assets/styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}